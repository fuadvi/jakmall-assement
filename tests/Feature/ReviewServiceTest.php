<?php

namespace Tests\Feature;

use App\Services\Review\IReviewService;
use App\Services\Review\ReviewService;
use Illuminate\Support\Facades\File;
use Tests\TestCase;

class ReviewServiceTest extends TestCase
{
    protected $reviewService;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->reviewService = $this->spy(IReviewService::class);
        $this->app->instance(IReviewService::class, ReviewService::class);
    }

    private function ExpectedListReview()
    {
        $reviews = File::get(database_path('reviews.json'));
        return json_decode($reviews, true);
    }

    private function ExpectedProdukById(int $productId)
    {
        return array_filter($this->ExpectedListReview(), function ($products) use ($productId) {
            return $products['id'] === $productId;
        });
    }
    private function ExpectedReviewProduk()
    {
        return[
             [
                "id" => 1,
                "product_id" => 2,
                "rating" => 5,
              ]
        ];
    }

    /**
     * @test
     *
     * @return void
     */
    public function will_return_service_not_null(): void
    {
        $this->assertNotNull($this->reviewService);
    }

    /**
     * @test
     *
     * @return void
     */
    public function will_return_list_product(): void
    {
        $this->reviewService->shouldReceive('getReview')
            ->andReturn($this->ExpectedListReview());
        $this->assertNotNull(collect($this->reviewService->getReview())->toJson());
    }
    /**
     * @test
     *
     * @return void
     */
    public function will_return_empty_array(): void
    {
        $this->reviewService->shouldReceive('getReview')
            ->andReturn([]);
        $this->assertEquals($this->reviewService->getReview(), []);
    }

    /**
     * @test
     *
     * @return void
     */
    public function will_return_review_product_by_id_productId_exitst(): void
    {
        $this->reviewService->shouldReceive('getReviewByProductId')
            ->andReturn($this->ExpectedReviewProduk());
        $product = $this->ExpectedProdukById(1);
        $this->assertEquals(collect($this->reviewService->getReviewByProductId(1))->toJson(), collect($product)->toJson());
    }
//
    /**
     * @test
     *
     * @return void
     */
    public function will_return_review_product_by_id_productId_not_contains(): void
    {
        $this->reviewService->shouldReceive('getReviewByProductId')
            ->andReturnNull();

        $product = $this->ExpectedProdukById(55);
        $this->assertNotContains(collect($this->reviewService->getProductById(55))->toJson(),$product);
    }

}